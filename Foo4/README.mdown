Automatic Reverse Event Handler Generator
=========================================

Based on [LLVM 3.2](http://llvm.org/releases/download.html#3.2)

Attempt 3 (Foo4)
----------------
This approach has fared well.  Full basic blocks of instructions
have been reversed as well as **if** statements.  Now we are attempting
loop constructs.  Natural loops are being targeted as that should bring
us very high coverage.  Debugging output can be enabled like so:

    export DBG=-debug

Further, finer-grained debugging output is in
the process of being added.  It can be run like this:

    export DBG="-debug-only=Instrumenter"

Then run the **run.sh** script or use the Makefile.  Available
**debug-only** options are **aug-struct**, **Instrumenter**, **Inverter**, and **Hello**.

### Notes ###

C++ flags are required under Linux as clang++ does not seem to search
these directories:

    export CXXFLAGS=-I/usr/include/x86_64-linux-gnu/c++/4.8

### Metadata ###

[Metadata](http://llvm.org/docs/doxygen/html/classllvm_1_1MDNode.html)
should help us solve some of these problems.  Our metadata,
accessible via `getMetadata("jml")` is currently used to ignore
instructions that we inserted.  This is rather limiting.  It is also
used to mark `CmpInst` instructions so we can keep track of appropriate
block information and loop metadata, too.  Available MD strings are:
* jml
* jml.augSwap
* jml.swap
* jml.icmp
* jml.icmp.loop

The above strings represent what needs to be able to be expressed by
our new MD approach...
